{"name": "Получение записи о сотруднике", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nAssertionError: assert 200 == 201", "trace": "@allure.description(\"Создать новую компанию. В этой компании создать новую запись о сотруднике. Запросить информацию о сотруднике \\\n                        по  API и через БД. Провести проверку с неверным статус-кодом, возвращаемый по API\")\n    @allure.feature(\"Негативная проверка\")\n    @allure.title(\"Получение записи о сотруднике\")\n    @allure.severity(\"Major\")\n    @pytest.mark.xfail()\n    def test_invalid_check_note_new_worker():\n        with allure.step(\"Получить данные из API\"):\n            with allure.step(\"Перед получением записи о сотруднике создать её\"):\n                company_id = driver.create_company(fake.name(), fake.text(20))\n                api_resp_first_name = fake.first_name()\n                api_resp_last_name = fake.last_name()\n                api_resp_middle_name = fake.first_name()\n                api_resp_phone = \"222222222222\"\n                api_resp_url = fake.url()\n                api_resp_new_worker = driver.employee_post(company_id, api_resp_first_name, api_resp_last_name, api_resp_middle_name, api_resp_phone, api_resp_url)\n                new_id =  api_resp_new_worker[0]['id']\n            with allure.step(\"Отправить запрос по API. ПОлучить данные\"):\n                path = '/'\n                api_resp_id = driver.employee_get(path, new_id)[0][\"id\"]\n                api_resp_status = driver.employee_get(path, new_id)[1]\n        with allure.step(\"Проверить данные из API\"):\n            assert api_resp_id == new_id\n>           assert api_resp_status == 201\nE           assert 200 == 201\n\ntest_employee_page_1.py:215: AssertionError"}, "description": "Создать новую компанию. В этой компании создать новую запись о сотруднике. Запросить информацию о сотруднике                     по  API и через БД. Провести проверку с неверным статус-кодом, возвращаемый по API", "steps": [{"name": "Получить данные из API", "status": "passed", "steps": [{"name": "Перед получением записи о сотруднике создать её", "status": "passed", "start": 1678199359875, "stop": 1678199360631}, {"name": "Отправить запрос по API. ПОлучить данные", "status": "passed", "start": 1678199360631, "stop": 1678199361448}], "start": 1678199359875, "stop": 1678199361448}, {"name": "Проверить данные из API", "status": "failed", "statusDetails": {"message": "AssertionError: assert 200 == 201\n", "trace": "  File \"/Users/vadim/Documents/My_GIT_hub/SkyPro_Automation_Test/Lesson_10/test_employee_page_1.py\", line 215, in test_invalid_check_note_new_worker\n    assert api_resp_status == 201\n"}, "start": 1678199361448, "stop": 1678199361448}], "start": 1678199359875, "stop": 1678199361448, "uuid": "181c73e4-3de9-4cd8-b939-0a43f0f89b82", "historyId": "e23b270eb6b37deccd9cfea4c98f1e9e", "testCaseId": "c15a5552c6d4efce98f65128e09407f5", "fullName": "test_employee_page_1#test_invalid_check_note_new_worker", "labels": [{"name": "severity", "value": "Major"}, {"name": "feature", "value": "Негативная проверка"}, {"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "suite", "value": "test_employee_page_1"}, {"name": "host", "value": "VAdims-Mac-mini.local"}, {"name": "thread", "value": "99325-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_employee_page_1"}]}