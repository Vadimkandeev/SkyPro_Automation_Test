{"uid":"f48101132ec616c8","name":"Создание нового сотрудника.","fullName":"test_employee_page_1#test_invalid_create_new_note_2","historyId":"d04d1c3f8e353f1ba923f067f86ea1b5","time":{"start":1678199352245,"stop":1678199352756,"duration":511},"description":"Создать запись о новом сотруднике. Сделать запрос о создании записи                     по  API и через БД. В запросе по API намерено указать невалидные данные.                     Сравнить результаты возвращаемых ответов. Проверить статус-код, возвращаемый по API","descriptionHtml":"<p>Создать запись о новом сотруднике. Сделать запрос о создании записи                     по  API и через БД. В запросе по API намерено указать невалидные данные.                     Сравнить результаты возвращаемых ответов. Проверить статус-код, возвращаемый по API</p>\n","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 500 == 201","statusTrace":"@allure.description(\"Создать запись о новом сотруднике. Сделать запрос о создании записи \\\n                        по  API и через БД. В запросе по API намерено указать невалидные данные. \\\n                        Сравнить результаты возвращаемых ответов. Проверить статус-код, возвращаемый по API\")\n    @allure.feature(\"Негативная проверка\")\n    @allure.title(\"Создание нового сотрудника.\")\n    @allure.severity(\"Critical\")\n    @pytest.mark.xfail()\n    def test_invalid_create_new_note_2():\n        with allure.step(\"Задать невалидные данные для запроса\"):\n            company_id = 99999999999999999 #driver.create_company(fake.name(), fake.text(20))\n            first_name = fake.first_name()\n            last_name = fake.last_name()\n            middle_name = fake.first_name()\n            phone = fake.phone_number()\n            url = fake.url()\n        with allure.step(\"Отправить запрос по API\"):\n            nem_worker = driver.employee_post(company_id, first_name, last_name, middle_name, phone, url)\n        with allure.step(\"Сравнить статус ответа с ожидаемым\"):\n>           assert nem_worker[1]== 201\nE           assert 500 == 201\n\ntest_employee_page_1.py:136: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1678199325798,"stop":1678199325841,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Создать запись о новом сотруднике. Сделать запрос о создании записи                     по  API и через БД. В запросе по API намерено указать невалидные данные.                     Сравнить результаты возвращаемых ответов. Проверить статус-код, возвращаемый по API","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 500 == 201","statusTrace":"@allure.description(\"Создать запись о новом сотруднике. Сделать запрос о создании записи \\\n                        по  API и через БД. В запросе по API намерено указать невалидные данные. \\\n                        Сравнить результаты возвращаемых ответов. Проверить статус-код, возвращаемый по API\")\n    @allure.feature(\"Негативная проверка\")\n    @allure.title(\"Создание нового сотрудника.\")\n    @allure.severity(\"Critical\")\n    @pytest.mark.xfail()\n    def test_invalid_create_new_note_2():\n        with allure.step(\"Задать невалидные данные для запроса\"):\n            company_id = 99999999999999999 #driver.create_company(fake.name(), fake.text(20))\n            first_name = fake.first_name()\n            last_name = fake.last_name()\n            middle_name = fake.first_name()\n            phone = fake.phone_number()\n            url = fake.url()\n        with allure.step(\"Отправить запрос по API\"):\n            nem_worker = driver.employee_post(company_id, first_name, last_name, middle_name, phone, url)\n        with allure.step(\"Сравнить статус ответа с ожидаемым\"):\n>           assert nem_worker[1]== 201\nE           assert 500 == 201\n\ntest_employee_page_1.py:136: AssertionError","steps":[{"name":"Задать невалидные данные для запроса","time":{"start":1678199352245,"stop":1678199352246,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Отправить запрос по API","time":{"start":1678199352246,"stop":1678199352755,"duration":509},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Сравнить статус ответа с ожидаемым","time":{"start":1678199352755,"stop":1678199352756,"duration":1},"status":"failed","statusMessage":"AssertionError: assert 500 == 201\n","statusTrace":"  File \"/Users/vadim/Documents/My_GIT_hub/SkyPro_Automation_Test/Lesson_10/test_employee_page_1.py\", line 136, in test_invalid_create_new_note_2\n    assert nem_worker[1]== 201\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"Негативная проверка"},{"name":"severity","value":"Critical"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"suite","value":"test_employee_page_1"},{"name":"host","value":"VAdims-Mac-mini.local"},{"name":"thread","value":"99325-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_employee_page_1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[],"tags":["@pytest.mark.xfail"]},"source":"f48101132ec616c8.json","parameterValues":[]}