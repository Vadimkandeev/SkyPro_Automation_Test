{"uid":"e8ea769652f6fcb8","name":"Редактирование записи о сотруднике","fullName":"test_employee_page_1#test_invalid_change_worker_note","historyId":"0e0d2da8d5bb5cade79c69b627458df4","time":{"start":1678199363258,"stop":1678199364150,"duration":892},"description":"Создать новую компанию, создать в ней запись о новом сотруднике . Изменить  информацию о сотруднике                     по  API. В запросе по API отправить данные с нарушенем формата.  Запросить измененные данные о                      сотруднике через БД. Провести проверку возвращаемого статус-кода","descriptionHtml":"<p>Создать новую компанию, создать в ней запись о новом сотруднике . Изменить  информацию о сотруднике                     по  API. В запросе по API отправить данные с нарушенем формата.  Запросить измененные данные о                      сотруднике через БД. Провести проверку возвращаемого статус-кода</p>\n","status":"skipped","statusMessage":"XFAIL\n\nTypeError: EmployeeClass.employee_patch() takes 6 positional arguments but 8 were given","statusTrace":"@allure.description(\"Создать новую компанию, создать в ней запись о новом сотруднике . Изменить  информацию о сотруднике \\\n                        по  API. В запросе по API отправить данные с нарушенем формата.  Запросить измененные данные о \\\n                         сотруднике через БД. Провести проверку возвращаемого статус-кода\")\n    @allure.feature(\"Негативная проверка\")\n    @allure.title(\"Редактирование записи о сотруднике\")\n    @allure.severity(\"Major\")\n    @pytest.mark.xfail()\n    def test_invalid_change_worker_note():\n        # Перед редактированием записи о новом сотруднике, создаем запись\n        with allure.step(\"Отправить запрос на изменение записи по API\"):\n            with allure.step(\"Перед изменением записи о сотруднике создать её\"):\n                company_id = driver.create_company(fake.name(), fake.text(20))\n                api_resp_first_name = fake.first_name()\n                api_resp_last_name = fake.last_name()\n                api_resp_middle_name = fake.first_name()\n                api_resp_phone = \"22222222222\"\n                api_resp_url = fake.url()\n                api_resp_new_worker = driver.employee_post(company_id, api_resp_first_name, api_resp_last_name, api_resp_middle_name, api_resp_phone, api_resp_url)\n                new_id =  api_resp_new_worker[0]['id']\n            with allure.step(\"Сформировать данные для изменения записи\"):\n                lastName = fake.last_name()\n                email= fake.email()\n                url = fake.url()\n                isActive = True\n                title = fake.text(20)\n                data = fake.date_time()\n            with allure.step(\"ПОлучить ответ по API\"):\n>               resp = driver. employee_patch(new_id, lastName, email, url, isActive, title, data)\nE               TypeError: EmployeeClass.employee_patch() takes 6 positional arguments but 8 were given\n\ntest_employee_page_1.py:309: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1678199325798,"stop":1678199325841,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Создать новую компанию, создать в ней запись о новом сотруднике . Изменить  информацию о сотруднике                     по  API. В запросе по API отправить данные с нарушенем формата.  Запросить измененные данные о                      сотруднике через БД. Провести проверку возвращаемого статус-кода","status":"skipped","statusMessage":"XFAIL\n\nTypeError: EmployeeClass.employee_patch() takes 6 positional arguments but 8 were given","statusTrace":"@allure.description(\"Создать новую компанию, создать в ней запись о новом сотруднике . Изменить  информацию о сотруднике \\\n                        по  API. В запросе по API отправить данные с нарушенем формата.  Запросить измененные данные о \\\n                         сотруднике через БД. Провести проверку возвращаемого статус-кода\")\n    @allure.feature(\"Негативная проверка\")\n    @allure.title(\"Редактирование записи о сотруднике\")\n    @allure.severity(\"Major\")\n    @pytest.mark.xfail()\n    def test_invalid_change_worker_note():\n        # Перед редактированием записи о новом сотруднике, создаем запись\n        with allure.step(\"Отправить запрос на изменение записи по API\"):\n            with allure.step(\"Перед изменением записи о сотруднике создать её\"):\n                company_id = driver.create_company(fake.name(), fake.text(20))\n                api_resp_first_name = fake.first_name()\n                api_resp_last_name = fake.last_name()\n                api_resp_middle_name = fake.first_name()\n                api_resp_phone = \"22222222222\"\n                api_resp_url = fake.url()\n                api_resp_new_worker = driver.employee_post(company_id, api_resp_first_name, api_resp_last_name, api_resp_middle_name, api_resp_phone, api_resp_url)\n                new_id =  api_resp_new_worker[0]['id']\n            with allure.step(\"Сформировать данные для изменения записи\"):\n                lastName = fake.last_name()\n                email= fake.email()\n                url = fake.url()\n                isActive = True\n                title = fake.text(20)\n                data = fake.date_time()\n            with allure.step(\"ПОлучить ответ по API\"):\n>               resp = driver. employee_patch(new_id, lastName, email, url, isActive, title, data)\nE               TypeError: EmployeeClass.employee_patch() takes 6 positional arguments but 8 were given\n\ntest_employee_page_1.py:309: TypeError","steps":[{"name":"Отправить запрос на изменение записи по API","time":{"start":1678199363258,"stop":1678199364150,"duration":892},"status":"broken","statusMessage":"TypeError: EmployeeClass.employee_patch() takes 6 positional arguments but 8 were given\n","statusTrace":"  File \"/Users/vadim/Documents/My_GIT_hub/SkyPro_Automation_Test/Lesson_10/test_employee_page_1.py\", line 309, in test_invalid_change_worker_note\n    resp = driver. employee_patch(new_id, lastName, email, url, isActive, title, data)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Перед изменением записи о сотруднике создать её","time":{"start":1678199363258,"stop":1678199364148,"duration":890},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Сформировать данные для изменения записи","time":{"start":1678199364149,"stop":1678199364149,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ПОлучить ответ по API","time":{"start":1678199364149,"stop":1678199364149,"duration":0},"status":"broken","statusMessage":"TypeError: EmployeeClass.employee_patch() takes 6 positional arguments but 8 were given\n","statusTrace":"  File \"/Users/vadim/Documents/My_GIT_hub/SkyPro_Automation_Test/Lesson_10/test_employee_page_1.py\", line 309, in test_invalid_change_worker_note\n    resp = driver. employee_patch(new_id, lastName, email, url, isActive, title, data)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":3,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"Major"},{"name":"feature","value":"Негативная проверка"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"suite","value":"test_employee_page_1"},{"name":"host","value":"VAdims-Mac-mini.local"},{"name":"thread","value":"99325-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_employee_page_1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail"]},"source":"e8ea769652f6fcb8.json","parameterValues":[]}