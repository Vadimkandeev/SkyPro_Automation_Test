{"uid":"655a445a8a8d8a54","name":"Получение записи о сотруднике","fullName":"test_employee_page_1#test_invalid_check_note_new_worker","historyId":"e23b270eb6b37deccd9cfea4c98f1e9e","time":{"start":1678199359875,"stop":1678199361448,"duration":1573},"description":"Создать новую компанию. В этой компании создать новую запись о сотруднике. Запросить информацию о сотруднике                     по  API и через БД. Провести проверку с неверным статус-кодом, возвращаемый по API","descriptionHtml":"<p>Создать новую компанию. В этой компании создать новую запись о сотруднике. Запросить информацию о сотруднике                     по  API и через БД. Провести проверку с неверным статус-кодом, возвращаемый по API</p>\n","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 200 == 201","statusTrace":"@allure.description(\"Создать новую компанию. В этой компании создать новую запись о сотруднике. Запросить информацию о сотруднике \\\n                        по  API и через БД. Провести проверку с неверным статус-кодом, возвращаемый по API\")\n    @allure.feature(\"Негативная проверка\")\n    @allure.title(\"Получение записи о сотруднике\")\n    @allure.severity(\"Major\")\n    @pytest.mark.xfail()\n    def test_invalid_check_note_new_worker():\n        with allure.step(\"Получить данные из API\"):\n            with allure.step(\"Перед получением записи о сотруднике создать её\"):\n                company_id = driver.create_company(fake.name(), fake.text(20))\n                api_resp_first_name = fake.first_name()\n                api_resp_last_name = fake.last_name()\n                api_resp_middle_name = fake.first_name()\n                api_resp_phone = \"222222222222\"\n                api_resp_url = fake.url()\n                api_resp_new_worker = driver.employee_post(company_id, api_resp_first_name, api_resp_last_name, api_resp_middle_name, api_resp_phone, api_resp_url)\n                new_id =  api_resp_new_worker[0]['id']\n            with allure.step(\"Отправить запрос по API. ПОлучить данные\"):\n                path = '/'\n                api_resp_id = driver.employee_get(path, new_id)[0][\"id\"]\n                api_resp_status = driver.employee_get(path, new_id)[1]\n        with allure.step(\"Проверить данные из API\"):\n            assert api_resp_id == new_id\n>           assert api_resp_status == 201\nE           assert 200 == 201\n\ntest_employee_page_1.py:215: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1678199325798,"stop":1678199325841,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Создать новую компанию. В этой компании создать новую запись о сотруднике. Запросить информацию о сотруднике                     по  API и через БД. Провести проверку с неверным статус-кодом, возвращаемый по API","status":"skipped","statusMessage":"XFAIL\n\nAssertionError: assert 200 == 201","statusTrace":"@allure.description(\"Создать новую компанию. В этой компании создать новую запись о сотруднике. Запросить информацию о сотруднике \\\n                        по  API и через БД. Провести проверку с неверным статус-кодом, возвращаемый по API\")\n    @allure.feature(\"Негативная проверка\")\n    @allure.title(\"Получение записи о сотруднике\")\n    @allure.severity(\"Major\")\n    @pytest.mark.xfail()\n    def test_invalid_check_note_new_worker():\n        with allure.step(\"Получить данные из API\"):\n            with allure.step(\"Перед получением записи о сотруднике создать её\"):\n                company_id = driver.create_company(fake.name(), fake.text(20))\n                api_resp_first_name = fake.first_name()\n                api_resp_last_name = fake.last_name()\n                api_resp_middle_name = fake.first_name()\n                api_resp_phone = \"222222222222\"\n                api_resp_url = fake.url()\n                api_resp_new_worker = driver.employee_post(company_id, api_resp_first_name, api_resp_last_name, api_resp_middle_name, api_resp_phone, api_resp_url)\n                new_id =  api_resp_new_worker[0]['id']\n            with allure.step(\"Отправить запрос по API. ПОлучить данные\"):\n                path = '/'\n                api_resp_id = driver.employee_get(path, new_id)[0][\"id\"]\n                api_resp_status = driver.employee_get(path, new_id)[1]\n        with allure.step(\"Проверить данные из API\"):\n            assert api_resp_id == new_id\n>           assert api_resp_status == 201\nE           assert 200 == 201\n\ntest_employee_page_1.py:215: AssertionError","steps":[{"name":"Получить данные из API","time":{"start":1678199359875,"stop":1678199361448,"duration":1573},"status":"passed","steps":[{"name":"Перед получением записи о сотруднике создать её","time":{"start":1678199359875,"stop":1678199360631,"duration":756},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Отправить запрос по API. ПОлучить данные","time":{"start":1678199360631,"stop":1678199361448,"duration":817},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Проверить данные из API","time":{"start":1678199361448,"stop":1678199361448,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 200 == 201\n","statusTrace":"  File \"/Users/vadim/Documents/My_GIT_hub/SkyPro_Automation_Test/Lesson_10/test_employee_page_1.py\", line 215, in test_invalid_check_note_new_worker\n    assert api_resp_status == 201\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"severity","value":"Major"},{"name":"feature","value":"Негативная проверка"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"suite","value":"test_employee_page_1"},{"name":"host","value":"VAdims-Mac-mini.local"},{"name":"thread","value":"99325-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_employee_page_1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail"]},"source":"655a445a8a8d8a54.json","parameterValues":[]}